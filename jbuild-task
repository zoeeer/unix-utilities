#!/usr/bin/ksh

#######################################################################
# jbuild-task
#     Run this tool on the task compile server.
#     Build task package from src, for both new and old SOAP interface.
#
# history: Jul 09 2015 Created
#######################################################################

_cmd=${0##*/}

usage() {
	echo "Usage:"
	echo "        $_cmd [-f feat_id] [-i info] [-v soap_ver] [-s src_dir]"
	echo "        $_cmd -k [other options]"
	echo "        $_cmd -h"
	echo "Build task packages for both new and old SOAP interface."
	echo
	echo "Options:"
	echo "  -f feat_id     feature id."
	echo "  -i info        distro info that will be appended to package name."
	echo "  -v soap_ver    SOAP version, 'old' or 'new'." 
	echo "                 if not specified, both package will be built."
	echo "  -s src_dir     source dir, default to 'src' under current directory"
	echo "  -k             keep the output directories instead of creating tarballs."
	echo "  -h             show this help."
	echo
	echo "Structure of the work directory should be:"
	echo "\$SRCDIR/      - required (src or your src_dir specified with -s)"
	echo "\$SRCDIR/xml/"
	echo "\$SRCDIR/twl/"
	echo "\$SRCDIR/config/"
	echo "\$SRCDIR/script/"
	echo "\$SRCDIR/cfg/"
	echo "\$SRCDIR/cwl/"
	echo
	echo "Example:"
	echo "        $_cmd"
	echo "            generates NewSOAP.tar and OldSOAP.tar"
	echo "        $_cmd -f75979 -i28G -v new"
	echo "            generates 75979_NewSOAP_28G.tar"
	echo "        $_cmd -f75979 -i28G -v new -k"
	echo "            generates dir 75979_NewSOAP_28G instead of tar package"
	echo "        $_cmd -f 76804 -i RTR -s 76804_RTR_src"
	echo "            generates 76804_NewSOAP_RTR.tar and 76804_OldSOAP_RTR.tar"
}

# Default configurations
SRCDIR=src
Build_For_New_SOAP=Y
Build_For_Old_SOAP=Y
mf=/shome/sms/rangt/bin/Makefile_for_eSM_Task
typeset -l ver=new

# Get options
while getopts "hf:i:v:s:k" opt
do
	case $opt in
	h)
		usage; exit 0
		;;
	f)
		feat=${OPTARG}_
		;;
	i)
		distro_info=_$OPTARG
		;;
	v)
		ver=$OPTARG
		if [ $ver = "new" ] || [ $ver = "1.6" ] ; then
			Build_For_New_SOAP=Y
			Build_For_Old_SOAP=N
		elif [ $ver = "old" ] || [ $ver = "1.4" ] ; then
			Build_For_New_SOAP=N
			Build_For_Old_SOAP=Y
		else
			echo "$_cmd: parameter error - SOAP version $ver not recognized"
			usage; exit 2
		fi
		;;
	s)
		SRCDIR=$OPTARG
		;;
	k)
		NoTar=y
		;;
	*)
		usage; exit 1
		;;
	esac
done

#shift $((OPTIND-1))

if [ ! $SRCDIR ] || [ ! -d $SRCDIR ] ; then
	echo "$_cmd: invalid src dir: $SRCDIR"
	usage; exit 3
fi

wd=${SRCDIR%/*}
if [ $wd = $SRCDIR ] ; then
	wd=$PWD
fi
SRCDIR=${SRCDIR##*/}
echo work_dir=$wd
echo src_dir=$SRCDIR
echo feature=$feat
echo Makefile=$mf

warn_before_overwrite() {
	if [ -d $1 ] || [ -f $1 ] ; then
		echo "$1 already exists! overwrite it? (y/n)"
		read ans
		[ $ans != "y" ] && [ $ans != "Y" ] && echo exit && exit 4
		rm -r $1
	fi
}

build_package() {
	warn_before_overwrite $package
	warn_before_overwrite $package.tar
	mkdir $package
	rsync -am --exclude='xml' --exclude='*.java' $SRCDIR $package
	rm `find $SRCDIR -name *.class`
	mv $package/$SRCDIR $package/Current
	cp -p $SRCDIR/xml/*.xml $package/Current
	# deal with script dir
	[ -d $package/Current/script ] && mv $package/Current/script $package
	# deal with config dir
	[ -d $package/Current/config ] && mv $package/Current/config $package
	# deal with CustomMacro mapping files
	macros=`find $package/Current -name CustomMacro_*.xml`
	if [ $macros ] ; then
		mkdir $package/CustomMacro
		mv $macros $package/CustomMacro
	fi
	find $package | xargs chmod a+r
	find $package -type d | xargs chmod a+x
	if [ $NoTar ] ; then
		echo "Done! No .tar file generated. Please check the dir $package"
	else
		tar -cpf $package.tar $package
		chmod a+r $package.tar
		rm -r $package
		echo "Build $package.tar done!"
	fi
}

#set -x
old_wd=$PWD
cd $wd

# Build for new SOAP
if [ $Build_For_New_SOAP = "Y" ] ; then
	echo "Compling for new SOAP..."
	(cd $SRCDIR; make -f $mf new)
	if [ $? -ne 0 ] ; then
		echo "$_cmd: Compling for new SOAP failed!" && exit 5
	fi
	echo "Compling for new SOAP successful!"
	package=${feat}NewSOAP$distro_info
	echo "Building package for new SOAP"
	build_package;
fi

# Build for old SOAP
if [ $Build_For_Old_SOAP = "Y" ] ; then
	echo "Compling for old SOAP..."
	(cd $SRCDIR; make -f $mf old)
	if [ $? -ne 0 ] ; then
		echo "$_cmd: Compling for old SOAP failed!" && exit 5
	fi
	echo "Compling for old SOAP successful!"
	package=${feat}OldSOAP$distro_info
	echo "Building package for old SOAP"
	build_package;
fi

cd $old_wd
