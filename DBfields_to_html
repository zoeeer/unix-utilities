#!/usr/bin/python

import os
import sys
from xml.dom import minidom

_cmd = os.path.basename(sys.argv[0])
usage = 'Usage:\n\t' + _cmd + ' dbname [filter_file]'

if len(sys.argv) == 1:
	print usage
	sys.exit(1)
if len(sys.argv) > 3:
	print _cmd + ': parameter error'
	print usage
	sys.exit(2)

dbname = sys.argv[1]
if len(sys.argv) == 3:
	filterfile = sys.argv[2]
xmlfile = dbname + '.xml'
csvfile = dbname + '-csv.xml'

# fields fileter
try:
	f = open(filterfile)
	filter = set(f.read().splitlines())
	f.close()
except NameError:
	filter = None

# Map eSM names to view names
csvdata = minidom.parse(csvfile)
fields = csvdata.getElementsByTagName('ViewAttr')
viewNameMap = dict()
for field in fields:
	eSM_name = field.getAttribute('Link-SvcAttr')
	view_name = field.getAttribute('vatName')
	viewNameMap[eSM_name] = view_name

### functions for parsing DATA_ITEMs ###
"""
	parse DATA_ITEMs to the following format:
	itemlist = {
		esm_name : {
			'view_name' : view_name,
			'type' : type,
			'type_desc' : type_desc,
			'required' : 'Required|Optional',
		},
		...
	}
"""
def get_type_desc(xml_item, type):
	if type == 'counter':
		maxLen = item.getAttribute('MAX_LENGTH')
		if int(maxLen) > 16:
			type_desc = 'Long counter'
		else:
			type_desc = 'Counter'
	elif type == 'counter range':
		range_constraint = item.getElementsByTagName('RangeConstraint')
		range_constraint = range_constraint[0]
		maxValue = range_constraint.getAttribute('maxValue')
		minValue = range_constraint.getAttribute('minValue')
		type_desc = 'Counter(' + minValue + ',' + maxValue + ')'
	elif type == 'string' or type == 'digit_string':
		enum_values = item.getElementsByTagName('EnumValue')
		if len(enum_values) > 0:	# This is an enumeration string
			print >> sys.stderr, name + ': [' + type + '] has enum constraint'
			type_desc = 'Enumeration:'
			for enumValue in enum_values:
				type_desc += '\n' + enumValue.getAttribute('user_mnemonic')
			return type_desc
		length_constraint = item.getElementsByTagName('LengthConstraint')
		if len(length_constraint) == 0:
			maxLen = item.getAttribute('MAX_LENGTH')
			minLen = item.getAttribute('MIN_LENGTH')
		else:
			length_constraint = length_constraint[0]
			maxLen = length_constraint.getAttribute('maxLength')
			minLen = length_constraint.getAttribute('minLength')
		date_constraint = item.getElementsByTagName('DateTimeConstraint')
		if len(date_constraint) > 0:
			date_constraint = date_constraint[0]
			type_desc = maxLen + ' digit string of format ' + date_constraint.getAttribute('format')
		else:
			if 'DATE' in name.upper():
				print >> sys.stderr, name + ': [' + type + '] is likely to be a DATE type!'
			if type == 'digit_string':
				type_desc = 'digital string'
			else:
				type_desc = 'string'
			if minLen == '0' or minLen == '':
				minLen = '1'
			if minLen == maxLen:
				type_desc = maxLen + type_desc
			else:
				type_desc = minLen + '-' + maxLen + type_desc
	elif type == 'enum' or type == 'enum symbolic':
		enum_values = item.getElementsByTagName('EnumValue')
		type_desc = 'Enumeration:'
		for enumValue in enum_values:
			type_desc += '\n' + enumValue.getAttribute('user_mnemonic')
	elif type == 'flag':
		type_desc = 'Flag(Y/N)'
	elif type == 'hex_value':
		type_desc = type
	else:
		type_desc = type
		print >> sys.stderr, 'unknown type: ' + type

	#if len(item.getElementsByTagName('RegExpConstraint')) > 0:
	#	print >> sys.stderr, name + ': [' + type + '] has RegExpConstraint'

	return type_desc

def data_item(xml_item):
	name = xml_item.getAttribute('NAME')
	view_name = viewNameMap[name]
	type = xml_item.getAttribute('TYPE')
	type_desc = get_type_desc(xml_item, type)

	required = item.getAttribute('IS_REQUIRED')
	if required == 'true':
		required = "Required"
	else:
		required = "Optional"

	return {
		'view_name' : view_name,
		'type' : type,
		'type_desc' : type_desc,
		'required' : required,
	}

xmldata = minidom.parse(xmlfile)
xml_item_list = xmldata.getElementsByTagName('DATA_ITEM')
itemlist = []
for item in xml_item_list:
	name = item.getAttribute('NAME')
	if filter and name not in filter:
		continue
	# skip mashed keys
	if item.getAttribute('AGGRTYPE') == 'mashedkey':
		continue
	itemlist.append(data_item(item))

### functions for converting to html ###
def convert_eol_to_html(sin):
	excel_incell_br = '<br style="mso-data-placement:same-cell;" />'
	return sin.replace('\n', excel_incell_br)

def dict_to_html_tr(item, header):
	tr = ''
	for field in header:
		tr += '<td>' + convert_eol_to_html(item[field]) + '</td> '
	return '<tr> ' + tr + '</tr>\n'

def list_to_html_table(list, header):
	tb = ''
	for item in list:
		tb += dict_to_html_tr(item, header)
	return '<table>\n' + tb + '</table>\n'

# Write to html table
tbheader = ['view_name', 'type_desc', 'required']
print list_to_html_table(itemlist, tbheader)
